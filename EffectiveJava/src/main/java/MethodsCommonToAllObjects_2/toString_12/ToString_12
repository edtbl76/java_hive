# Item 12: Always override toString()

## java.lang.Object implementation
The default impl of toString() is to return 
- the class name + @ + the unsigned hex representation of the hashCode for
the instance of the class. 

## GENERAL CONTRACT
1. the returned string should be a "concise but informative representation
that is easy for a person to read"
1. ALL classes should override this method.

## REALLY? 
- It isn't critical, but it is a "treat your fellow developers" best
practice because it makes the class easier to work with and debug
    - for VALUE CLASSES, the string usually prints out the value
        - this means that anyone trying to use toString will expect
        the value rather than the class name and a hashcode
        - (If they wanted the class name, they'd just call getClass())

### ADDITIONAL GUIDELINES
Ideally, toString() should return ALL of the interesting information
contained in the object. 
- for large objects w/ many fields, try to provide a summary of
significant fields 
    - (i.e. what lives in the equals() comparisons? )

Ideally, it should be self explanatory
    - Thread SUCKS at this. 

VALUE CLASSES should specify the format of the return value.
- serves as a "standard", unambiguous human-readable representation
of the object. 
    - supports input, output, human-readable data objects etc.
    - if format is specified it is usually recommended to provide
    a matching STATIC FACTORY (or constructor) so devs can easily 
    swap back and forth between Object and String representation
   
NOTE: the disadvantage of specifying format of the toString() 
return value is that once you've specified it... you are stuck with it.
- devs are going to write code to parse/generate and embed the representation
into persistent data, so it will be very difficult to change it in the future.
    - (if you change it, their code will break.)
    
UNLIKE hashCode(), you SHOULD document your intention w/ toString()
- if you are going to specify the format, then do it w/ precision

ACCESSORS should be provided for every value included in toString()
- if you don't do this, then devs have to parse toString() to 
get that data 
    - TERRIBLE -> this essentially makes it a volatile API
   

## USAGE
- toString() is automatically envoked when passed to 
    - println
    - printf
    - string concatenation operator(s)
    - assert
    - debugger printing
    
## WHEN TO USE, WHEN NOT TO
Use toString() in VALUE CLASSES

Use toString() in abstract classes whose subclasses share a common
string representation

NOT Necessary to use toString() in static utility classes

NOT Necessary to use toString() in (most) enum types

## AUTOGEN
- These are syntactically correct, but you need to determine if
the MEANING of the autogenerated code fits the class
    - i.e. not all values are significant, etc.
